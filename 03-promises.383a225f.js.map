{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,SACrCC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAgBJ,SAASC,cAAc,mBAkC7C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAC5BA,EAAM,G,CAzCbR,EAAYgB,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOjB,EAAakB,OAC5BC,EAAOF,OAAOhB,EAAYiB,OAC1BE,EAASH,OAAOf,EAAcgB,OAC9BG,EAAW,GAEXD,GAAU,GAAKJ,EAAQ,GAAKG,EAAM,IACpCG,EAAA3B,GAAS4B,OAAOC,QAAQ,qCAG1B,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCJ,EAAWI,EACXtB,EAAckB,EAAUL,GACrBU,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA3B,GAAS4B,OAAOI,QACd,uBAAqBvB,QAAiBC,MAAU,IAGnDuB,OAAO,EAACxB,SAAEA,EAAQC,MAAEA,MACnBiB,EAAA3B,GAAS4B,OAAOC,QACd,sBAAoBpB,QAAeC,MAAU,IAGnDW,GAASG,EAEXtB,EAAYgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\nconst delayElement = document.querySelector('[name=\"delay\"]');\nconst stepElement = document.querySelector('[name=\"step\"]');\nconst amountElement = document.querySelector('[name=\"amount\"]');\n\nformElement.addEventListener('submit', onHandleForm);\n\nfunction onHandleForm(event) {\n  event.preventDefault();\n\n  let delay = Number(delayElement.value);\n  let step = Number(stepElement.value);\n  let amount = Number(amountElement.value);\n  let position = 0;\n\n  if (amount <= 0 || delay < 0 || step <0 ) {\n    Notiflix.Notify.failure(`Please input correct values (>=0)`);\n  }\n\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch (({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n  formElement.reset();\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n        reject({ position, delay });\n    }, delay);\n  });\n};\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$delayElement","$47d4ff9957288465$var$stepElement","$47d4ff9957288465$var$amountElement","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","position1","$parcel$interopDefault","Notify","failure","i","then","success","catch","reset"],"version":3,"file":"03-promises.383a225f.js.map"}