{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SACrCC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAgBJ,SAASC,cAAc,mBAkC7C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GACpBA,E,IAzCPR,EAAYgB,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOjB,EAAakB,OAC5BC,EAAOF,OAAOhB,EAAYiB,OAC1BE,EAASH,OAAOf,EAAcgB,QAG9BE,GAAU,GAAKJ,EAAQ,GAAKG,EAAM,IACpCE,EAAA1B,GAAS2B,OAAOC,QAAS,qCAG3B,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAEhCrB,EADWqB,EACaR,GACrBS,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBgB,EAAA1B,GAAS2B,OAAOK,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAO,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACnBgB,EAAA1B,GAAS2B,OAAOC,QACd,sBAAqCK,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDW,GAASG,EAEXtB,EAAYiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formElement = document.querySelector('.form');\nconst delayElement = document.querySelector('[name=\"delay\"]');\nconst stepElement = document.querySelector('[name=\"step\"]');\nconst amountElement = document.querySelector('[name=\"amount\"]');\n\nformElement.addEventListener('submit', onHandleForm);\n\nfunction onHandleForm(event) {\n  event.preventDefault();\n\n  let delay = Number(delayElement.value);\n  let step = Number(stepElement.value);\n  let amount = Number(amountElement.value);\n  let position = 0;\n\n  if (amount <= 0 || delay < 0 || step <0 ) {\n    Notiflix.Notify.failure(`Please input correct values (>=0)`);\n  }\n\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch (({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n  formElement.reset();\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n        reject({ position, delay });\n    }, delay);\n  });\n};\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$delayElement","$ce04d3a99e08e73b$var$stepElement","$ce04d3a99e08e73b$var$amountElement","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch","reset"],"version":3,"file":"03-promises.64e7b2ce.js.map"}